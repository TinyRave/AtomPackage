# Do NOT edit this file! Edit the source files in tinyrave-lib and push changes
# to here.

module.exports.STD_LIB = """
const SAMPLE_RATE = 44100;
const BUFFER_SIZE = 2048; /* Per-channel */

var tr_samplesGenerated = 0;

/**
 * Polyfills
 */
if ( !Array.isArray ) {
  Array.isArray = function(arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}
if ( ![].fill) {
  Array.prototype.fill = function( value ) {
    var O = Object( this );
    var len = parseInt( O.length, 10 );
    var start = arguments[1];
    var relativeStart = parseInt( start, 10 ) || 0;
    var k = relativeStart < 0
            ? Math.max( len + relativeStart, 0)
            : Math.min( relativeStart, len );
    var end = arguments[2];
    var relativeEnd = end === undefined
                      ? len
                      : ( parseInt( end)  || 0) ;
    var final = relativeEnd < 0
                ? Math.max( len + relativeEnd, 0 )
                : Math.min( relativeEnd, len );
    for (; k < final; k++) {
        O[k] = value;
    }
    return O;
  };
}

self.addEventListener('message', function(message) {
  if (message.data[0] === "generate") {
    var timeOffset = tr_samplesGenerated / SAMPLE_RATE;
    buffer = new Float64Array(BUFFER_SIZE * 2);
    if (typeof buildSample !== "undefined" && buildSample !== null) {
      for (var i=0; i < BUFFER_SIZE; i++) {
        sample = buildSample(tr_samplesGenerated / SAMPLE_RATE);
        tr_samplesGenerated++;
        switch (typeof sample) {
          case "object":
            buffer[i * 2] = sample[0];
            buffer[i * 2 + 1] = sample[1];
            break;
          case "number":
            buffer[i * 2] = buffer[i * 2 + 1] = sample;
        }
      }
      return postMessage(["buffer", buffer]);
    } else {
      return postMessage(["log", "Your track must define a buildSample() function."]);
    }
  }
});

// Generated by CoffeeScript 1.7.1
var BlockScheduler, BlockScope, Frequency, TinyRave, TinyRaveTimer,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Frequency = (function() {
  function Frequency() {}

  Frequency.C_0 = 16.35;

  Frequency.C_SHARP_0 = Frequency.D_FLAT_0 = 17.32;

  Frequency.D_0 = 18.35;

  Frequency.D_SHARP_0 = Frequency.E_FLAT_0 = 19.45;

  Frequency.E_0 = 20.60;

  Frequency.F_0 = 21.83;

  Frequency.F_SHARP_0 = Frequency.G_FLAT_0 = 23.12;

  Frequency.G_0 = 24.50;

  Frequency.G_SHARP_0 = Frequency.A_FLAT_0 = 25.96;

  Frequency.A_0 = 27.50;

  Frequency.A_SHARP_0 = Frequency.B_FLAT_0 = 29.14;

  Frequency.B_0 = 30.87;

  Frequency.C_1 = 32.70;

  Frequency.C_SHARP_1 = Frequency.D_FLAT_1 = 34.65;

  Frequency.D_1 = 36.71;

  Frequency.D_SHARP_1 = Frequency.E_FLAT_1 = 38.89;

  Frequency.E_1 = 41.20;

  Frequency.F_1 = 43.65;

  Frequency.F_SHARP_1 = Frequency.G_FLAT_1 = 46.25;

  Frequency.G_1 = 49.00;

  Frequency.G_SHARP_1 = Frequency.A_FLAT_1 = 51.91;

  Frequency.A_1 = 55.00;

  Frequency.A_SHARP_1 = Frequency.B_FLAT_1 = 58.27;

  Frequency.B_1 = 61.74;

  Frequency.DEEP_C = Frequency.C_2 = 65.41;

  Frequency.C_SHARP_2 = Frequency.D_FLAT_2 = 69.30;

  Frequency.D_2 = 73.42;

  Frequency.D_SHARP_2 = Frequency.E_FLAT_2 = 77.78;

  Frequency.E_2 = 82.41;

  Frequency.F_2 = 87.31;

  Frequency.F_SHARP_2 = Frequency.G_FLAT_2 = 92.50;

  Frequency.G_2 = 98.00;

  Frequency.G_SHARP_2 = Frequency.A_FLAT_2 = 103.83;

  Frequency.A_2 = 110.00;

  Frequency.A_SHARP_2 = Frequency.B_FLAT_2 = 116.54;

  Frequency.B_2 = 123.47;

  Frequency.TENOR_C = Frequency.C_3 = 130.81;

  Frequency.C_SHARP_3 = Frequency.D_FLAT_3 = 138.59;

  Frequency.D_3 = 146.83;

  Frequency.D_SHARP_3 = Frequency.E_FLAT_3 = 155.56;

  Frequency.E_3 = 164.81;

  Frequency.F_3 = 174.61;

  Frequency.F_SHARP_3 = Frequency.G_FLAT_3 = 185.00;

  Frequency.G_3 = 196.00;

  Frequency.G_SHARP_3 = Frequency.A_FLAT_3 = 207.65;

  Frequency.A_3 = 220.00;

  Frequency.A_SHARP_3 = Frequency.B_FLAT_3 = 233.08;

  Frequency.B_3 = 246.94;

  Frequency.MIDDLE_C = Frequency.C_4 = 261.63;

  Frequency.C_SHARP_4 = Frequency.D_FLAT_4 = 277.18;

  Frequency.D_4 = 293.66;

  Frequency.D_SHARP_4 = Frequency.E_FLAT_4 = 311.13;

  Frequency.E_4 = 329.63;

  Frequency.F_4 = 349.23;

  Frequency.F_SHARP_4 = Frequency.G_FLAT_4 = 369.99;

  Frequency.G_4 = 392.00;

  Frequency.G_SHARP_4 = Frequency.A_FLAT_4 = 415.30;

  Frequency.A440 = Frequency.A_4 = 440.00;

  Frequency.A_SHARP_4 = Frequency.B_FLAT_4 = 466.16;

  Frequency.B_4 = 493.88;

  Frequency.C_5 = 523.25;

  Frequency.C_SHARP_5 = Frequency.D_FLAT_5 = 554.37;

  Frequency.D_5 = 587.33;

  Frequency.D_SHARP_5 = Frequency.E_FLAT_5 = 622.25;

  Frequency.E_5 = 659.25;

  Frequency.F_5 = 698.46;

  Frequency.F_SHARP_5 = Frequency.G_FLAT_5 = 739.99;

  Frequency.G_5 = 783.99;

  Frequency.G_SHARP_5 = Frequency.A_FLAT_5 = 830.61;

  Frequency.A_5 = 880.00;

  Frequency.A_SHARP_5 = Frequency.B_FLAT_5 = 932.33;

  Frequency.B_5 = 987.77;

  Frequency.SOPRANO_C = Frequency.HIGH_C = Frequency.C_6 = 1046.50;

  Frequency.C_SHARP_6 = Frequency.D_FLAT_6 = 1108.73;

  Frequency.D_6 = 1174.66;

  Frequency.D_SHARP_6 = Frequency.E_FLAT_6 = 1244.51;

  Frequency.E_6 = 1318.51;

  Frequency.F_6 = 1396.91;

  Frequency.F_SHARP_6 = Frequency.G_FLAT_6 = 1479.98;

  Frequency.G_6 = 1567.98;

  Frequency.G_SHARP_6 = Frequency.A_FLAT_6 = 1661.22;

  Frequency.A_6 = 1760.00;

  Frequency.A_SHARP_6 = Frequency.B_FLAT_6 = 1864.66;

  Frequency.B_6 = 1975.53;

  Frequency.DOUBLE_HIGH_C = Frequency.C_7 = 2093.00;

  Frequency.C_SHARP_7 = Frequency.D_FLAT_7 = 2217.46;

  Frequency.D_7 = 2349.32;

  Frequency.D_SHARP_7 = Frequency.E_FLAT_7 = 2489.02;

  Frequency.E_7 = 2737.02;

  Frequency.F_7 = 2793.83;

  Frequency.F_SHARP_7 = Frequency.G_FLAT_7 = 2959.97;

  Frequency.G_7 = 3135.97;

  Frequency.G_SHARP_7 = Frequency.A_FLAT_7 = 3322.44;

  Frequency.A_7 = 3520.00;

  Frequency.A_SHARP_7 = Frequency.B_FLAT_7 = 3729.31;

  Frequency.B_7 = 3951.07;

  Frequency.C_8 = 4186.01;

  Frequency.C_SHARP_8 = Frequency.D_FLAT_8 = 4434.92;

  Frequency.D_8 = 4698.63;

  Frequency.D_SHARP_8 = Frequency.E_FLAT_8 = 4988.03;

  Frequency.E_8 = 5284.04;

  Frequency.F_8 = 5588.65;

  Frequency.F_SHARP_8 = Frequency.G_FLAT_8 = 5919.91;

  Frequency.G_8 = 6281.93;

  Frequency.G_SHARP_8 = Frequency.A_FLAT_8 = 6644.88;

  Frequency.A_8 = 8040.00;

  Frequency.A_SHARP_8 = Frequency.B_FLAT_8 = 8458.62;

  Frequency.B_8 = 8902.13;

  return Frequency;

})();


/*
TinyRaveTimer
--------------------------
The TinyRave library provides a custom sample accurate implementation of
setInterval / setTimeout / clearTimeout. Any specified callbacks will preempt
audio rendering allowing you to modify your environment with sample-level
time resolution.

It's recommended you use the DSL provided in TinyRave.createBlock, which
simplifies the process of creating short-lived loops by managing the
registration and unregistration of callbacks for you.

(See TinyRave.createBlock, and the `@every()` / `@after()` methods in `run()`.)
 */

TinyRaveTimer = (function() {
  function TinyRaveTimer() {
    this.callbackDescriptors = [];
    this.lastId = 1;
    this.time = 0;
  }

  TinyRaveTimer.prototype.getTime = function() {
    return this.time;
  };

  TinyRaveTimer.prototype.setTime = function(time) {
    if (time > this.time || time === 0) {
      this.time = time;
      this.fireCallbacks();
    }
    return time;
  };

  TinyRaveTimer.prototype.dequeueNextDescriptor = function() {
    var descriptor, fireThreshold, i, _i, _len, _ref;
    _ref = this.callbackDescriptors;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      descriptor = _ref[i];
      fireThreshold = descriptor.registrationTime + descriptor.interval;
      if (fireThreshold <= this.time) {
        if (descriptor.isLoop) {
          descriptor.registrationTime = fireThreshold;
        } else {
          this.callbackDescriptors.splice(i, 1);
        }
        return descriptor;
      }
    }
  };

  TinyRaveTimer.prototype.fireCallbacks = function() {
    var descriptor, _results;
    _results = [];
    while (descriptor = this.dequeueNextDescriptor()) {
      _results.push(descriptor.callback.apply(void 0));
    }
    return _results;
  };

  TinyRaveTimer.prototype.registerCallback = function(callback, interval, registrationTime, isLoop) {
    var id;
    if (registrationTime == null) {
      registrationTime = 0;
    }
    if (isLoop == null) {
      isLoop = false;
    }
    id = this.lastId++;
    this.callbackDescriptors.push({
      id: id,
      callback: callback,
      interval: interval,
      registrationTime: registrationTime,
      isLoop: isLoop
    });
    return id;
  };

  TinyRaveTimer.prototype.unregisterCallback = function(id) {
    var descriptor, i, _results;
    i = 0;
    _results = [];
    while (i < this.callbackDescriptors.length) {
      descriptor = this.callbackDescriptors[i];
      if (descriptor.id === id) {
        this.callbackDescriptors.splice(i, 1);
        i--;
      }
      _results.push(i++);
    }
    return _results;
  };

  return TinyRaveTimer;

})();

BlockScheduler = (function() {
  BlockScheduler.createBlock = function(duration, methods) {
    return {
      duration: duration,
      methods: methods
    };
  };

  function BlockScheduler() {
    this.blocks = [];
  }

  BlockScheduler.prototype.getBlockQueueLength = function() {
    var block, length, _i, _len, _ref;
    length = 0;
    _ref = this.blocks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      block = _ref[_i];
      length += block.duration;
    }
    return length;
  };

  BlockScheduler.prototype.push = function() {
    var block, blocks, delay, _i, _len, _results;
    blocks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = blocks.length; _i < _len; _i++) {
      block = blocks[_i];
      if (TinyRave.timer.getTime() > 0) {
        console.warn("Push all blocks before the first call to buildSample. (Feel free to email me if you need this fixed.)");
      }
      delay = this.getBlockQueueLength();
      this.blocks.push(block);
      _results.push(TinyRave.setTimeout(((function(_this) {
        return function() {
          return _this.shiftBlock();
        };
      })(this)), delay));
    }
    return _results;
  };

  BlockScheduler.prototype.shiftBlock = function() {
    var block, blockScope, teardown, _ref;
    block = this.blocks.shift();
    if (block == null) {
      console.error("In shiftBlock(). No block left to shift.");
    }
    blockScope = new BlockScope(block.duration);
    if ((_ref = block.methods.blockWillStart) != null) {
      _ref.apply(blockScope);
    }
    teardown = function() {
      var _ref1;
      blockScope.blockWillEnd();
      return (_ref1 = block.methods.blockDidEnd) != null ? _ref1.apply(blockScope) : void 0;
    };
    TinyRave.setTimeout(teardown, block.duration);
    return block.methods.run.apply(blockScope);
  };

  return BlockScheduler;

})();

BlockScope = (function() {
  function BlockScope(duration) {
    this.duration = duration;
    this.timerIds = [];
  }

  BlockScope.prototype.getDuration = function() {
    return this.duration;
  };

  BlockScope.prototype.every = function(delay, callback) {
    var id;
    callback.apply(this);
    id = TinyRave.setInterval(((function(_this) {
      return function() {
        return callback.apply(_this);
      };
    })(this)), delay);
    return this.timerIds.push(id);
  };

  BlockScope.prototype.after = function(delay, callback) {
    var id;
    id = TinyRave.setTimeout(((function(_this) {
      return function() {
        return callback.apply(_this);
      };
    })(this)), delay);
    return this.timerIds.push(id);
  };

  BlockScope.prototype.blockWillEnd = function() {
    var id, _i, _len, _ref, _results;
    _ref = this.timerIds;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      _results.push(TinyRave.clearInterval(id));
    }
    return _results;
  };

  return BlockScope;

})();

TinyRave = {};

TinyRave.timer = new TinyRaveTimer();

TinyRave.scheduler = new BlockScheduler();

TinyRave.createBlock = BlockScheduler.createBlock;

TinyRave.logOnce = function(message) {
  if (__indexOf.call(TinyRave.logOnceMessages, message) < 0) {
    console.log(message);
    return TinyRave.logOnceMessages.push(message);
  }
};

TinyRave.logOnceMessages = [];

TinyRave.setBPM = function(bpm) {
  return TinyRave.BPM = bpm;
};

TinyRave.setInterval = function(callback, delay) {
  return TinyRave.timer.registerCallback(callback, delay, TinyRave.timer.getTime(), true);
};

TinyRave.setTimeout = function(callback, delay) {
  return TinyRave.timer.registerCallback(callback, delay, TinyRave.timer.getTime(), false);
};

TinyRave.clearInterval = function(id) {
  TinyRave.timer.unregisterCallback(id);
  return void 0;
};

Number.prototype.beat = Number.prototype.beats = function() {
  var bps;
  if (TinyRave.BPM == null) {
    console.error("You must call TinyRave.setBPM(yourBPM) before calling Number.beat()");
  }
  bps = TinyRave.BPM / 60;
  return this / bps;
};

"""
